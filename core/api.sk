# Name : RS_Core_api.sk
# Author : Sweetenpotato
# Description : RealSurvival 팩에 필수적인 API
# Dependencies : Skript 2.5.3 / SkQuery

# {RS::api::inv::click} : Inventory click 관련 변수 출력 설정
# {RS::api::variable} : 변수 조작 관련 설정

# preifx
options:
	prefix: <##D4A7FB>[<##3EB489>RealSurvival<##D4A7FB>]&r

# 리스트 중간에 비어있는 공간 삭제하는 함수
function shrinkList(name:text):
	set {_i} to 1

	loop {%{_name}%::*}:
		set {%{_name}%::%{_i}%} to loop-value
		add 1 to {_i}
    
# 두 위치가 같은 위치인지 판단하는 함수
function isSameLocation(loc1:location, loc2:location) :: boolean:
	set {_x1} to x loc of {_loc1}
	set {_y1} to y loc of {_loc1}
	set {_z1} to z loc of {_loc1}
	set {_world1} to world of {_loc1}

	set {_x2} to x loc of {_loc2}
	set {_y2} to y loc of {_loc2}
	set {_z2} to z loc of {_loc2}
	set {_world2} to world of {_loc2}

	if {_x1} is {_x2}:
		if {_y1} is {_y2}:
			if {_z1} is {_z2}:
				if {_world1} is {_world2}:
					return yes

# 주어진 값이 숫자인지 판단하는 함수
function isNumber(value:text) :: boolean:
	if {_value} matches "[0-9]+":
		return yes
	return no

# 주어진 값이 알파벳인지 판단하는 함수
function isAlphabet(value:text) :: boolean:
	if {_value} matches "[a-z|A-Z]+":
		return yes
	return no

# 주어진 값이 한글인지 판단하는 함수
function isKorean(value:text) :: boolean:
	if {_value} matches "[ㄱ-ㅎ|ㅏ-ㅣ|가-힣]+":
		return yes
	return no

# Debugging Log 관련 변수
on load:
	if {RS::api::inv::click} is not set:
		set {RS::api::inv::click} to true
	if {RS::api::variable} is not set:
		set {RS::api::variable} to true

# Inventory Click 관련 출력
on inventory click:
	if {RS::api::inv::click} is true:
		if player is op:
			message "=========================================="
			message "{@prefix} Time : %now%"
			message "{@prefix} Event Inventoryaction : %event-Inventoryaction%"
			message "{@prefix} Name of Event Inventory : %name of event-inventory%"
			message "{@prefix} Event Slot : %event-slot%"
			message "{@prefix} Slot Number of Event Slot : %index of event-slot%"
			message "{@prefix} Event Player : %event-player%"
			message "{@prefix} Event World : %event-world%"
			message "{@prefix} Event Clicktype : %event-clicktype%"
			message "{@prefix} Event Itemtype : %event-itemtype%"
			message "=========================================="

# Debugging Log 출력 여부 설정
command /output [<text>] [<text>]:
	trigger:
		if player is op:
			if arg-1 is "inventory":
				if arg-2 is "true" and "yes":
					set {RS::api::inv::click} to yes

# 변수 값 
command /variable [<text>] [<text>] [<text>]:
	trigger:
		if {RS::api::variable} is true:
			if arg-1 is "get": # 변수 값 확인
				if arg-2 is not set:
					message "{@prefix} 적절한 변수 이름을 입력해 주세요."
				else if {%arg-2%} is not set:
					message "{@prefix} 변수 {%arg-2%}에 정해진 값이 없습니다."
				else if {%arg-2%} is set:
					if arg-3 is not set:
						message "{@prefix} 변수 {%arg-2%} 값 : %{%arg-2%}%"
					else:
						message "{@prefix} 이 명령어는 세번째 인자를 요구하지 않습니다."

			# 변수 값 설정
			else if arg-1 is "set":
				if arg-2 is not set:
					message "{@prefix} 적절한 변수 이름을 입력해 주세요."
				else if {%arg-2%} is not set:
					if arg-3 is not set:
						message "{@prefix} 변수 {%arg-2%}에 대입할 값을 입력해 주세요."
					else:
						set {_value} to arg-3
						
						if isNumber({_value}):
							set {_value} to {_value} parsed as integer
						
						set {%arg-2%} to {_value}
						message "{@prefix} 변수 {%arg-2%}를 새로 생성한 후 %arg-3%를 대입합니다."

				else if {%arg-2%} is set:
					if arg-3 is not set:
						message "{@prefix} 변수 {%arg-2%}에 대입할 값을 입력해 주세요."
					else:
						set {_value} to arg-3
						
						if isNumber({_value}):
							set {_value} to {_value} parsed as integer
						
						set {%arg-2%} to {_value}
						message "{@prefix} 변수 {%arg-2%}에 %arg-3%를 대입합니다."

			# 변수 값 제거
			else if arg-1 is "clear":
				if arg-2 is not set:
					message "{@prefix} 적절한 변수 이름을 입력해 주세요."
				else if {%arg-2%} is not set:
					message "{@prefix} 변수 {%arg-2%}는 선언되지 않았습니다."
				else if {%arg-2%} is set:
					if arg-3 is not set:
						clear {%arg-2%}
						message "{@prefix} 변수 {%arg-2%}를 삭제합니다."
					else:
						message "{@prefix} 이 명령어는 세번째 인자를 요구하지 않습니다."

			else:
				message "{@prefix} 존재하지 않는 명령어 입니다."
				message ""
				message "=========================================="
				message "{@prefix} /variable get [<변수명>] : 해당 변수의 값을 보여줍니다."
				message "{@prefix} /variable set [<변수명>] [<값>] : 해당 변수를 입력한 값으로 설정합니다."
				message "{@prefix} /variable clear [<변수명>] : 해당 변수를 초기화합니다."
				message "=========================================="
				message ""
		
		else:
			message "{@prefix} 현재 이 기능을 사용할 수 없습니다."

# 값 테스트
command /value [<text>] [<text>]:
	trigger:
		if arg-1 is "isAlpha":
			if arg-2 is set:
				set {_result} to isAlphabet(arg-2)
				message "{@prefix} Alphabetical : %{_result}%"

			else:
				message "{@prefix} 적절한 값을 입력해 주세요."
		else if arg-1 is "isNumber":
			if arg-2 is set:
				set {_result} to isNumber(arg-2)
				message "{@prefix} Numeric : %{_result}%"
		
			else:
				message "{@prefix} 적절한 값을 입력해 주세요."
		
		else if arg-1 is "isKorean":
			if arg-2 is set:
				set {_result} to isKorean(arg-2)
				message "{@prefix} Korean : %{_result}%"

			else:
				message "{@prefix} 적절한 값을 입력해 주세요."

command /array [<text>]:
	trigger:
		message "%arg-1% : %{%arg-1%::*}%"

command /reset:
	trigger:
		clear {furnace::pos::*}


